# ./Fake-Offline.x 2 -Z 64 -S 64 -e 64
# ./compile.py -Y -O -I -l -R 64 alpha_input_orig.mpc 1 1 32 active
# Scripts/spdz2k.sh alpha_input_orig-1-1-32-active -F
# ./compile.py -Y -O -I -l -R 64 alpha_input_orig.mpc 1 1 32 passive
# Scripts/semi2k.sh alpha_input_orig-1-1-32-passive -F

PORTNUM = 14000
n_rounds = 1
n_threads = 1

n_clients = int(program.args[1]) if len(program.args) > 1 else 1

n_inputs = int(program.args[2]) if len(program.args) > 2 else 1

n_bits = int(program.args[3]) if len(program.args) > 3 else 32

active = len(program.args) > 4 and program.args[4] == "active"


def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    last = regint.read_from_socket(client_socket_id)
    return client_socket_id, last


def close_connections(number_clients):
    @for_range(number_clients)
    def _(i):
        closeclientconnection(i)


def client_input(t, client_socket_id, client_input_len):
    return t.receive_from_client(client_input_len, client_socket_id)


def main():
    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln("Listening for client connections on base port %s", PORTNUM)

    def game_loop(_=None):
        print_ln("Starting a new round...")

        # Clients socket id (integer).
        client_sockets = Array(n_clients, regint)
        # Number of clients
        number_clients = MemValue(regint(0))
        # Client ids to identity client
        client_ids = Array(n_clients, sint)
        # Keep track of received inputs
        seen = Array(n_clients, regint)
        seen.assign_all(0)

        # Loop round waiting for each client to connect
        @do_while
        def client_connections():
            client_id, last = accept_client()

            @if_(client_id >= n_clients)
            def _():
                print_ln("client id too high")
                crash()

            client_sockets[client_id] = client_id
            client_ids[client_id] = client_id
            seen[client_id] = 1

            @if_(last == 1)
            def _():
                number_clients.write(client_id + 1)

            return (sum(seen) < number_clients) + (number_clients == 0)

        def type_run(t):
            # Clients secret input.
            # client_values = t.Array(n_clients)

            # @for_range_multithread(n_threads, 1, number_clients)
            # @for_range(number_clients)
            # def _(client_id):
            # client_values[client_id] =
            client_input(t, regint(0), n_inputs * n_bits)

        start_timer(1)
        type_run(sintbit)
        if active:
            check_point()
        stop_timer(1)

        close_connections(number_clients)

        return True

    if n_rounds > 0:
        print("run %d rounds" % n_rounds)
        for_range(n_rounds)(game_loop)
    else:
        print("run forever")
        do_while(game_loop)


main()
